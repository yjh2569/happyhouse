{"version":3,"file":"js/208-legacy.cc015faa.js","mappings":"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","sources":["webpack://final-project-vue/./src/components/store/SmapList.vue?d6fe","webpack://final-project-vue/src/components/store/SmapList.vue","webpack://final-project-vue/./src/components/store/SmapList.vue?cccf","webpack://final-project-vue/./src/components/store/SmapList.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"cols\":\"12\",\"ms\":\"12\"}},[_c('v-row',{attrs:{\"id\":\"map\"}},[_c('v-btn',{attrs:{\"id\":\"btnRoadView\"},on:{\"click\":_vm.showRoadView}},[_vm._v(\"로드뷰\")]),_c('div',{attrs:{\"id\":\"roadView\"}}),_c('div',{staticClass:\"category\"},[_c('ul',[_c('li',{attrs:{\"id\":\"allMenu\"},on:{\"click\":function($event){return _vm.changeMarker('all')}}},[_c('span',{staticClass:\"ico_comm ico_coffee\"}),_vm._v(\" 전체보기 \")]),_c('li',{attrs:{\"id\":\"coffeeMenu\"},on:{\"click\":function($event){return _vm.changeMarker('coffee')}}},[_c('span',{staticClass:\"ico_comm ico_coffee\"}),_vm._v(\" 커피숍 \")]),_c('li',{attrs:{\"id\":\"restaurantMenu\"},on:{\"click\":function($event){return _vm.changeMarker('restaurant')}}},[_c('span',{staticClass:\"ico_comm2\"}),_vm._v(\" 음식점 \")]),_c('li',{attrs:{\"id\":\"storeMenu\"},on:{\"click\":function($event){return _vm.changeMarker('store')}}},[_c('span',{staticClass:\"ico_comm ico_store\"}),_vm._v(\" 편의점 \")]),_c('li',{attrs:{\"id\":\"carparkMenu\"},on:{\"click\":function($event){return _vm.changeMarker('carpark')}}},[_c('span',{staticClass:\"ico_comm ico_carpark\"}),_vm._v(\" 주차장 \")])])])],1),_c('v-row',[_c('v-checkbox',{staticClass:\"mr-2\",attrs:{\"label\":\"교통정보 보기\"},on:{\"click\":_vm.setOverlayMapTypeId},model:{value:(_vm.chkTraffic),callback:function ($$v) {_vm.chkTraffic=$$v},expression:\"chkTraffic\"}},[_vm._v(\"교통정보 보기\")]),_c('v-checkbox',{staticClass:\"mr-2\",attrs:{\"label\":\"자전거도로 정보 보기\"},on:{\"click\":_vm.setOverlayMapTypeId},model:{value:(_vm.chkBicycle),callback:function ($$v) {_vm.chkBicycle=$$v},expression:\"chkBicycle\"}}),_c('v-checkbox',{staticClass:\"mr-2\",attrs:{\"label\":\"지형 정보 보기\"},on:{\"click\":_vm.setOverlayMapTypeId},model:{value:(_vm.chkTerrain),callback:function ($$v) {_vm.chkTerrain=$$v},expression:\"chkTerrain\"}})],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div cols=\"12\" ms=\"12\">\r\n    <v-row id=\"map\">\r\n      <v-btn id=\"btnRoadView\" @click=\"showRoadView\">로드뷰</v-btn>\r\n      <div id=\"roadView\"></div>\r\n      <div class=\"category\">\r\n        <ul>\r\n          <li id=\"allMenu\" @click=\"changeMarker('all')\">\r\n            <span class=\"ico_comm ico_coffee\"></span>\r\n            전체보기\r\n          </li>\r\n          <li id=\"coffeeMenu\" @click=\"changeMarker('coffee')\">\r\n            <span class=\"ico_comm ico_coffee\"></span>\r\n            커피숍\r\n          </li>\r\n          <li id=\"restaurantMenu\" @click=\"changeMarker('restaurant')\">\r\n            <span class=\"ico_comm2\"></span>\r\n            음식점\r\n          </li>\r\n          <li id=\"storeMenu\" @click=\"changeMarker('store')\">\r\n            <span class=\"ico_comm ico_store\"></span>\r\n            편의점\r\n          </li>\r\n          <li id=\"carparkMenu\" @click=\"changeMarker('carpark')\">\r\n            <span class=\"ico_comm ico_carpark\"></span>\r\n            주차장\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </v-row>\r\n    <v-row>\r\n      <v-checkbox\r\n        v-model=\"chkTraffic\"\r\n        :label=\"`교통정보 보기`\"\r\n        @click=\"setOverlayMapTypeId\"\r\n        class=\"mr-2\"\r\n        >교통정보 보기</v-checkbox\r\n      >\r\n      <v-checkbox\r\n        v-model=\"chkBicycle\"\r\n        :label=\"`자전거도로 정보 보기`\"\r\n        @click=\"setOverlayMapTypeId\"\r\n        class=\"mr-2\"\r\n      ></v-checkbox>\r\n      <v-checkbox\r\n        v-model=\"chkTerrain\"\r\n        :label=\"`지형 정보 보기`\"\r\n        @click=\"setOverlayMapTypeId\"\r\n        class=\"mr-2\"\r\n      ></v-checkbox>\r\n    </v-row>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapActions } from \"vuex\";\r\n\r\nconst houseStore = \"houseStore\";\r\n\r\nexport default {\r\n  name: \"SmapList\",\r\n\r\n  data: () => ({\r\n    markers: [],\r\n    infowindow: null,\r\n    marker: null,\r\n    curlat: 0,\r\n    curlng: 0,\r\n    roadView: false,\r\n    rvContainer: null,\r\n    rv: null,\r\n    rvClient: null,\r\n    rvMarker: null,\r\n    map: null,\r\n    terrain: null,\r\n    traffic: null,\r\n    bicycle: null,\r\n    chkTraffic: false,\r\n    chkBicycle: false,\r\n    chkTerrain: false,\r\n    markerImageSrc: \"\",\r\n    coffeeMarkers: [], // 커피숍 마커 객체를 가지고 있을 배열입니다\r\n    storeMarkers: [], // 편의점 마커 객체를 가지고 있을 배열입니다\r\n    carparkMarkers: [], // 주차장 마커 객체를 가지고 있을 배열입니다\r\n    coffeePositions: [],\r\n    storePositions: [],\r\n    carparkPositions: [],\r\n    resMarkers: [],\r\n    resPositions: [],\r\n  }),\r\n  props: {\r\n    house: null,\r\n  },\r\n  created() {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      this.curlat = position.coords.latitude;\r\n      this.curlng = position.coords.longitude;\r\n    });\r\n  },\r\n  computed: {\r\n    ...mapState(houseStore, [\"stores\"]),\r\n  },\r\n  watch: {\r\n    stores: function () {\r\n      this.displayMarkers(this.stores);\r\n    },\r\n  },\r\n  mounted() {\r\n    if (window.kakao && window.kakao.maps) {\r\n      this.initMap();\r\n    } else {\r\n      const script = document.createElement(\"script\");\r\n      /* global kakao */\r\n      script.onload = () => kakao.maps.load(this.initMap);\r\n      script.src =\r\n        \"//dapi.kakao.com/v2/maps/sdk.js?autoload=false&appkey=915cffed372954b7b44804ed422b9cf0\";\r\n      document.head.appendChild(script);\r\n    }\r\n    setTimeout(() => {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        this.curlat = position.coords.latitude;\r\n        this.curlng = position.coords.longitude;\r\n        let locPosition = new kakao.maps.LatLng(this.curlat, this.curlng); // 마커가 표시될 위치를 geolocation으로 얻어온 좌표로 생성합니다\r\n        // message = '<div style=\"padding:5px;\">현재 위치</div>'; // 인포윈도우에 표시될 내용입니다\r\n\r\n        // 마커와 인포윈도우를 표시합니다\r\n        this.displayMarker(locPosition);\r\n        this.displayMarkers(this.stores);\r\n      });\r\n      this.markerImageSrc =\r\n        \"https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/category.png\";\r\n      this.terrain = kakao.maps.MapTypeId.TERRAIN;\r\n      this.traffic = kakao.maps.MapTypeId.TRAFFIC;\r\n      this.bicycle = kakao.maps.MapTypeId.BICYCLE;\r\n      this.useDistrict = kakao.maps.MapTypeId.USE_DISTRICT;\r\n    }, 500);\r\n  },\r\n  methods: {\r\n    ...mapActions(houseStore, [\"detailStore\"]),\r\n    initMap() {\r\n      const container = document.getElementById(\"map\");\r\n      const options = {\r\n        center: new kakao.maps.LatLng(this.curlat, this.curlng),\r\n        level: 5,\r\n      };\r\n\r\n      //지도 객체를 등록합니다.\r\n      //지도 객체는 반응형 관리 대상이 아니므로 initMap에서 선언합니다.\r\n      this.map = new kakao.maps.Map(container, options);\r\n      // var marker = new kakao.maps.Marker({\r\n      //   position: this.map.getCenter(),\r\n      // });\r\n      // marker.setMap(this.map);\r\n      // 일반 지도와 스카이뷰로 지도 타입을 전환할 수 있는 지도타입 컨트롤을 생성합니다\r\n      var mapTypeControl = new kakao.maps.MapTypeControl();\r\n\r\n      // 지도에 컨트롤을 추가해야 지도위에 표시됩니다\r\n      // kakao.maps.ControlPosition은 컨트롤이 표시될 위치를 정의하는데 TOPRIGHT는 오른쪽 위를 의미합니다\r\n      this.map.addControl(mapTypeControl, kakao.maps.ControlPosition.TOPRIGHT);\r\n\r\n      // 지도 확대 축소를 제어할 수 있는  줌 컨트롤을 생성합니다\r\n      var zoomControl = new kakao.maps.ZoomControl();\r\n      this.map.addControl(zoomControl, kakao.maps.ControlPosition.RIGHT);\r\n    },\r\n    changeSize(wid, hei) {\r\n      const container = document.getElementById(\"map\");\r\n      container.style.width = `${wid}px`;\r\n      container.style.height = `${hei}px`;\r\n      this.map.relayout();\r\n    },\r\n    displayMarker(locPosition) {\r\n      const imageSrc = require(\"../../assets/star.png\");\r\n      const imageSize = new kakao.maps.Size(40, 40);\r\n      const markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize);\r\n      this.marker = new kakao.maps.Marker({\r\n        map: this.map,\r\n        position: locPosition,\r\n        image: markerImage,\r\n      });\r\n      var infowindow = new kakao.maps.InfoWindow({\r\n        content: `<div style=\"padding: 10px;text-align: center;width:150px;\"><h5>현재 위치</h5></div>`, // 인포윈도우에 표시할 내용\r\n      });\r\n\r\n      infowindow.open(this.map, this.marker);\r\n\r\n      // 지도 중심좌표를 접속위치로 변경합니다\r\n      this.map.setCenter(locPosition);\r\n    },\r\n    displayMarkers(markerPositions) {\r\n      if (this.markers.length > 0) {\r\n        this.markers.forEach((marker) => marker.setMap(null));\r\n      }\r\n      this.coffeePositions = [];\r\n      this.storePositions = [];\r\n      this.carparkPositions = [];\r\n      this.resPositions = [];\r\n      this.markers = [];\r\n      this.coffeeMarkers = [];\r\n      this.carparkMarkers = [];\r\n      this.storeMarkers = [];\r\n      this.resMarkers = [];\r\n      const positions = markerPositions.map(\r\n        (store) => new kakao.maps.LatLng(store.lat, store.lng),\r\n      );\r\n      var idx = 0;\r\n      var idx2 = 0;\r\n      var idx3 = 0;\r\n      var idx4 = 0;\r\n      markerPositions.map((store) => {\r\n        if (store.type === \"커피전문점/카페/다방\") {\r\n          // console.log(store.type);\r\n          this.coffeePositions[idx++] = new kakao.maps.LatLng(\r\n            store.lat,\r\n            store.lng,\r\n          );\r\n          // console.log(\"카페\" + store.lat, store.lng);\r\n        }\r\n        if (store.type === \"주차장운영\") {\r\n          this.carparkPositions[idx2++] = new kakao.maps.LatLng(\r\n            store.lat,\r\n            store.lng,\r\n          );\r\n        }\r\n        if (store.type === \"편의점\") {\r\n          this.storePositions[idx3++] = new kakao.maps.LatLng(\r\n            store.lat,\r\n            store.lng,\r\n          );\r\n        }\r\n        if (\r\n          store.type === \"후라이드/양념치킨\" ||\r\n          store.type === \"한식/백반/한정식\" ||\r\n          store.type === \"피자전문\" ||\r\n          store.type === \"중국음식/중국집\" ||\r\n          store.type === \"족발/보쌈전문\" ||\r\n          store.type === \"우동전문점\" ||\r\n          store.type === \"국수/만두/칼국수\" ||\r\n          store.type === \"냉면집\" ||\r\n          store.type === \"라면김밥분식\" ||\r\n          store.type === \"호프/맥주\"\r\n        ) {\r\n          this.resPositions[idx4++] = new kakao.maps.LatLng(\r\n            store.lat,\r\n            store.lng,\r\n          );\r\n        }\r\n      });\r\n      // console.log(\"확인: \" + this.coffeePositions);\r\n      this.createCoffeeMarkers();\r\n      this.createStoreMarkers();\r\n      this.createCarparkMarkers();\r\n      this.createResMarkers();\r\n\r\n      this.changeMarker(\"all\");\r\n      const informations = markerPositions.map((store) => ({\r\n        position: new kakao.maps.LatLng(store.lat, store.lng),\r\n        content: `<div style=\"padding: 10px;text-align:center;width: 150px\"><h5>${store.sname}</h5></div>`,\r\n        store: store,\r\n      }));\r\n\r\n      for (var i = 0; i < informations.length; i++) {\r\n        // 마커를 생성합니다\r\n        var marker = new kakao.maps.Marker({\r\n          map: this.map, // 마커를 표시할 지도\r\n          position: informations[i].position, // 마커의 위치\r\n        });\r\n\r\n        // 마커에 표시할 인포윈도우를 생성합니다\r\n        var infowindow = new kakao.maps.InfoWindow({\r\n          content: informations[i].content, // 인포윈도우에 표시할 내용\r\n        });\r\n\r\n        // 마커에 mouseover 이벤트와 mouseout 이벤트를 등록합니다\r\n        // 이벤트 리스너로는 클로저를 만들어 등록합니다\r\n        // for문에서 클로저를 만들어 주지 않으면 마지막 마커에만 이벤트가 등록됩니다\r\n        kakao.maps.event.addListener(\r\n          marker,\r\n          \"mouseover\",\r\n          this.makeOverListener(this.map, marker, infowindow),\r\n        );\r\n        kakao.maps.event.addListener(\r\n          marker,\r\n          \"mouseout\",\r\n          this.makeOutListener(infowindow),\r\n        );\r\n        kakao.maps.event.addListener(\r\n          marker,\r\n          \"click\",\r\n          this.moveToDetail(informations[i].store),\r\n        );\r\n        this.markers.push(marker);\r\n      }\r\n      // console.log(this.markers);\r\n      if (positions.length > 0) {\r\n        const bounds = positions.reduce(\r\n          (bounds, latlng) => bounds.extend(latlng),\r\n          new kakao.maps.LatLngBounds(),\r\n        );\r\n\r\n        this.map.setBounds(bounds);\r\n      }\r\n    },\r\n    makeOverListener(map, marker, infowindow) {\r\n      return function () {\r\n        infowindow.open(map, marker);\r\n      };\r\n    },\r\n    makeOutListener(infowindow) {\r\n      return function () {\r\n        infowindow.close();\r\n      };\r\n    },\r\n    moveToDetail(house) {\r\n      var self = this;\r\n      return function () {\r\n        self.detailStore(house);\r\n        if (self.$route.path !== \"/store/sdetail\")\r\n          self.$router.push(\"/store/sdetail\");\r\n      };\r\n    },\r\n    displayInfoWindow() {\r\n      if (this.infowindow && this.infowindow.getMap()) {\r\n        //이미 생성한 인포윈도우가 있기 때문에 지도 중심좌표를 인포윈도우 좌표로 이동시킨다.\r\n        this.map.setCenter(this.infowindow.getPosition());\r\n        return;\r\n      }\r\n\r\n      var iwContent = '<div style=\"padding:5px;\">Hello World!</div>', // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다\r\n        iwPosition = new kakao.maps.LatLng(33.450701, 126.570667), //인포윈도우 표시 위치입니다\r\n        iwRemoveable = true; // removeable 속성을 ture 로 설정하면 인포윈도우를 닫을 수 있는 x버튼이 표시됩니다\r\n\r\n      this.infowindow = new kakao.maps.InfoWindow({\r\n        map: this.map, // 인포윈도우가 표시될 지도\r\n        position: iwPosition,\r\n        content: iwContent,\r\n        removable: iwRemoveable,\r\n      });\r\n\r\n      this.map.setCenter(iwPosition);\r\n    },\r\n    showRoadView() {\r\n      if (!this.roadView) {\r\n        this.roadView = !this.roadView;\r\n        this.map.addOverlayMapTypeId(kakao.maps.MapTypeId.ROADVIEW);\r\n        this.rvContainer = document.getElementById(\"roadView\"); //로드뷰를 표시할 div\r\n        this.rv = new kakao.maps.Roadview(this.rvContainer); //로드뷰 객체\r\n        this.rvClient = new kakao.maps.RoadviewClient(); //좌표로부터 로드뷰 파노ID를 가져올 로드뷰 helper객체\r\n        this.rvContainer.style.display = \"none\";\r\n        this.rvContainer.style.height = \"0\";\r\n        this.rvContainer.style.right = \"0\";\r\n        this.map.relayout();\r\n\r\n        // 마커 이미지를 생성합니다.\r\n        var markImage = new kakao.maps.MarkerImage(\r\n          \"https://t1.daumcdn.net/localimg/localimages/07/2018/pc/roadview_minimap_wk_2018.png\",\r\n          new kakao.maps.Size(26, 46),\r\n          {\r\n            // 스프라이트 이미지를 사용합니다.\r\n            // 스프라이트 이미지 전체의 크기를 지정하고\r\n            spriteSize: new kakao.maps.Size(1666, 168),\r\n            // 사용하고 싶은 영역의 좌상단 좌표를 입력합니다.\r\n            // background-position으로 지정하는 값이며 부호는 반대입니다.\r\n            spriteOrigin: new kakao.maps.Point(705, 114),\r\n            offset: new kakao.maps.Point(13, 46),\r\n          },\r\n        );\r\n\r\n        // 드래그가 가능한 마커를 생성합니다.\r\n        this.rvMarker = new kakao.maps.Marker({\r\n          image: markImage,\r\n          position: this.map.getCenter(),\r\n          draggable: true,\r\n          map: this.map,\r\n        });\r\n        var self = this;\r\n        //마커에 dragend 이벤트를 할당합니다\r\n        kakao.maps.event.addListener(this.rvMarker, \"dragend\", function () {\r\n          var position = self.rvMarker.getPosition(); //현재 마커가 놓인 자리의 좌표\r\n          self.toggleRoadview(position); //로드뷰를 토글합니다\r\n        });\r\n\r\n        //지도에 클릭 이벤트를 할당합니다\r\n        kakao.maps.event.addListener(this.map, \"click\", function (mouseEvent) {\r\n          // 현재 클릭한 부분의 좌표를 리턴\r\n          var position = mouseEvent.latLng;\r\n\r\n          self.rvMarker.setPosition(position);\r\n          self.toggleRoadview(position); //로드뷰를 토글합니다\r\n        });\r\n      } else {\r\n        this.roadView = !this.roadView;\r\n        this.rvMarker.setMap(null);\r\n        this.map.removeOverlayMapTypeId(kakao.maps.MapTypeId.ROADVIEW);\r\n        this.rvContainer.style.display = \"none\";\r\n      }\r\n    },\r\n    toggleRoadview(position) {\r\n      var self = this;\r\n      //전달받은 좌표(position)에 가까운 로드뷰의 panoId를 추출하여 로드뷰를 띄웁니다\r\n      this.rvClient.getNearestPanoId(position, 50, function (panoId) {\r\n        if (panoId === null) {\r\n          self.rvContainer.style.display = \"none\"; //로드뷰를 넣은 컨테이너를 숨깁니다\r\n          self.rvContainer.style.height = \"0%\";\r\n          self.map.relayout();\r\n        } else {\r\n          self.map.relayout(); //지도를 감싸고 있는 영역이 변경됨에 따라, 지도를 재배열합니다\r\n          self.rvContainer.style.display = \"block\"; //로드뷰를 넣은 컨테이너를 보이게합니다\r\n          self.rvContainer.style.height = \"50%\";\r\n          self.rvContainer.style.right = \"0\";\r\n          self.rv.setPanoId(panoId, position); //panoId를 통한 로드뷰 실행\r\n          self.rv.relayout(); //로드뷰를 감싸고 있는 영역이 변경됨에 따라, 로드뷰를 재배열합니다\r\n        }\r\n      });\r\n    },\r\n    setOverlayMapTypeId() {\r\n      this.map.removeOverlayMapTypeId(this.traffic);\r\n      this.map.removeOverlayMapTypeId(this.bicycle);\r\n      this.map.removeOverlayMapTypeId(this.terrain);\r\n      if (this.chkTraffic) this.map.addOverlayMapTypeId(this.traffic);\r\n      if (this.chkBicycle) this.map.addOverlayMapTypeId(this.bicycle);\r\n      if (this.chkTerrain) this.map.addOverlayMapTypeId(this.terrain);\r\n    },\r\n    createMarkerImage(src, size, options) {\r\n      var markerImage = new kakao.maps.MarkerImage(src, size, options);\r\n      return markerImage;\r\n    },\r\n    createMarker(position, image) {\r\n      var marker = new kakao.maps.Marker({\r\n        position: position,\r\n        image: image,\r\n      });\r\n\r\n      return marker;\r\n    },\r\n    // 커피숍 마커를 생성하고 커피숍 마커 배열에 추가하는 함수입니다\r\n    createCoffeeMarkers() {\r\n      for (var i = 0; i < this.coffeePositions.length; i++) {\r\n        var imageSize = new kakao.maps.Size(22, 26),\r\n          imageOptions = {\r\n            spriteOrigin: new kakao.maps.Point(10, 0),\r\n            spriteSize: new kakao.maps.Size(36, 98),\r\n          };\r\n\r\n        // 마커이미지와 마커를 생성합니다\r\n        var markerImage = this.createMarkerImage(\r\n            this.markerImageSrc,\r\n            imageSize,\r\n            imageOptions,\r\n          ),\r\n          marker = this.createMarker(this.coffeePositions[i], markerImage);\r\n\r\n        // 생성된 마커를 커피숍 마커 배열에 추가합니다\r\n        this.coffeeMarkers.push(marker);\r\n      }\r\n    },\r\n    setCoffeeMarkers(map) {\r\n      // if (this.coffeeMarkers.length > 0) {\r\n      //   this.coffeeMarkers.forEach(this.coffeeMarkers.setMap(map));\r\n      // }\r\n      // console.log(this.coffeeMarkers);\r\n      for (var i = 0; i < this.coffeeMarkers.length; i++) {\r\n        this.coffeeMarkers[i].setMap(map);\r\n        // console.log(this.coffeeMarkers[i]);\r\n      }\r\n    },\r\n    createStoreMarkers() {\r\n      for (var i = 0; i < this.storePositions.length; i++) {\r\n        var imageSize = new kakao.maps.Size(22, 26),\r\n          imageOptions = {\r\n            spriteOrigin: new kakao.maps.Point(10, 36),\r\n            spriteSize: new kakao.maps.Size(36, 98),\r\n          };\r\n\r\n        // 마커이미지와 마커를 생성합니다\r\n        var markerImage = this.createMarkerImage(\r\n            this.markerImageSrc,\r\n            imageSize,\r\n            imageOptions,\r\n          ),\r\n          marker = this.createMarker(this.storePositions[i], markerImage);\r\n\r\n        // 생성된 마커를 편의점 마커 배열에 추가합니다\r\n        this.storeMarkers.push(marker);\r\n      }\r\n    },\r\n    setStoreMarkers(map) {\r\n      for (var i = 0; i < this.storeMarkers.length; i++) {\r\n        this.storeMarkers[i].setMap(map);\r\n      }\r\n    },\r\n    createCarparkMarkers() {\r\n      for (var i = 0; i < this.carparkPositions.length; i++) {\r\n        var imageSize = new kakao.maps.Size(22, 26),\r\n          imageOptions = {\r\n            spriteOrigin: new kakao.maps.Point(10, 72),\r\n            spriteSize: new kakao.maps.Size(36, 98),\r\n          };\r\n\r\n        // 마커이미지와 마커를 생성합니다\r\n        var markerImage = this.createMarkerImage(\r\n            this.markerImageSrc,\r\n            imageSize,\r\n            imageOptions,\r\n          ),\r\n          marker = this.createMarker(this.carparkPositions[i], markerImage);\r\n\r\n        // 생성된 마커를 주차장 마커 배열에 추가합니다\r\n        this.carparkMarkers.push(marker);\r\n      }\r\n    },\r\n    setCarparkMarkers(map) {\r\n      for (var i = 0; i < this.carparkMarkers.length; i++) {\r\n        this.carparkMarkers[i].setMap(map);\r\n      }\r\n    },\r\n    // 음식점 마커를 생성하고 음식점 마커 배열에 추가하는 함수입니다\r\n    createResMarkers() {\r\n      for (var i = 0; i < this.resPositions.length; i++) {\r\n        var imageSize = new kakao.maps.Size(30, 30);\r\n        // imageOptions = {\r\n        //   spriteOrigin: new kakao.maps.Point(10, 0),\r\n        //   spriteSize: new kakao.maps.Size(36, 98),\r\n        // };\r\n\r\n        // 마커이미지와 마커를 생성합니다\r\n        var markerImage = this.createMarkerImage(\r\n            require(\"../../assets/restaurant.png\"),\r\n            // this.markerImageSrc,\r\n            imageSize,\r\n            // imageOptions,\r\n          ),\r\n          marker = this.createMarker(this.resPositions[i], markerImage);\r\n\r\n        // 생성된 마커를 음식점 마커 배열에 추가합니다\r\n        this.resMarkers.push(marker);\r\n      }\r\n    },\r\n    setResMarkers(map) {\r\n      // console.log(this.coffeeMarkers);\r\n      for (var i = 0; i < this.resMarkers.length; i++) {\r\n        this.resMarkers[i].setMap(map);\r\n        // console.log(this.resMarkers[i]);\r\n      }\r\n    },\r\n    changeMarker(type) {\r\n      var allMenu = document.getElementById(\"allMenu\");\r\n      var coffeeMenu = document.getElementById(\"coffeeMenu\");\r\n      var storeMenu = document.getElementById(\"storeMenu\");\r\n      var carparkMenu = document.getElementById(\"carparkMenu\");\r\n      var resMenu = document.getElementById(\"restaurantMenu\");\r\n      if (this.markers.length > 0) {\r\n        this.markers.forEach((marker) => marker.setMap(null));\r\n      }\r\n      this.markers = [];\r\n      // this.displayMarkers(this.stores);\r\n      // 커피숍 카테고리가 클릭됐을 때\r\n      if (type === \"coffee\") {\r\n        // 커피숍 카테고리를 선택된 스타일로 변경하고\r\n        allMenu.className = \"\";\r\n        coffeeMenu.className = \"menu_selected\";\r\n\r\n        // 편의점과 주차장 카테고리는 선택되지 않은 스타일로 바꿉니다\r\n        storeMenu.className = \"\";\r\n        carparkMenu.className = \"\";\r\n        resMenu.className = \"\";\r\n\r\n        // 커피숍 마커들만 지도에 표시하도록 설정합니다\r\n        // this.markers = [];\r\n        this.setCoffeeMarkers(this.map);\r\n        this.setStoreMarkers(null);\r\n        this.setCarparkMarkers(null);\r\n        this.setResMarkers(null);\r\n      } else if (type === \"store\") {\r\n        // 편의점 카테고리가 클릭됐을 때\r\n\r\n        // 편의점 카테고리를 선택된 스타일로 변경하고\r\n        allMenu.className = \"\";\r\n        coffeeMenu.className = \"\";\r\n        storeMenu.className = \"menu_selected\";\r\n        carparkMenu.className = \"\";\r\n        resMenu.className = \"\";\r\n\r\n        // 편의점 마커들만 지도에 표시하도록 설정합니다\r\n        this.setCoffeeMarkers(null);\r\n        this.setStoreMarkers(this.map);\r\n        this.setCarparkMarkers(null);\r\n        this.setResMarkers(null);\r\n      } else if (type === \"carpark\") {\r\n        // 주차장 카테고리가 클릭됐을 때\r\n\r\n        // 주차장 카테고리를 선택된 스타일로 변경하고\r\n        allMenu.className = \"\";\r\n        coffeeMenu.className = \"\";\r\n        storeMenu.className = \"\";\r\n        carparkMenu.className = \"menu_selected\";\r\n        resMenu.className = \"\";\r\n\r\n        // 주차장 마커들만 지도에 표시하도록 설정합니다\r\n        this.setCoffeeMarkers(null);\r\n        this.setStoreMarkers(null);\r\n        this.setCarparkMarkers(this.map);\r\n        this.setResMarkers(null);\r\n      } else if (type === \"restaurant\") {\r\n        // 주차장 카테고리가 클릭됐을 때\r\n\r\n        // 주차장 카테고리를 선택된 스타일로 변경하고\r\n        allMenu.className = \"\";\r\n        coffeeMenu.className = \"\";\r\n        storeMenu.className = \"\";\r\n        carparkMenu.className = \"\";\r\n        resMenu.className = \"menu_selected\";\r\n\r\n        // 주차장 마커들만 지도에 표시하도록 설정합니다\r\n        this.setCoffeeMarkers(null);\r\n        this.setStoreMarkers(null);\r\n        this.setCarparkMarkers(null);\r\n        this.setResMarkers(this.map);\r\n      } else if (type === \"all\") {\r\n        allMenu.className = \"menu_selected\";\r\n        coffeeMenu.className = \"\";\r\n        storeMenu.className = \"\";\r\n        carparkMenu.className = \"\";\r\n        resMenu.className = \"\";\r\n        // this.displayMarkers(this.map);\r\n        const positions = this.stores.map(\r\n          (store) => new kakao.maps.LatLng(store.lat, store.lng),\r\n        );\r\n        const informations = this.stores.map((store) => ({\r\n          position: new kakao.maps.LatLng(store.lat, store.lng),\r\n          content: `<div style=\"padding: 10px;text-align:center;width: 150px\"><h5>${store.sname}</h5></div>`,\r\n          store: store,\r\n        }));\r\n\r\n        for (var i = 0; i < informations.length; i++) {\r\n          // 마커를 생성합니다\r\n          var marker = new kakao.maps.Marker({\r\n            map: this.map, // 마커를 표시할 지도\r\n            position: informations[i].position, // 마커의 위치\r\n          });\r\n\r\n          // 마커에 표시할 인포윈도우를 생성합니다\r\n          var infowindow = new kakao.maps.InfoWindow({\r\n            content: informations[i].content, // 인포윈도우에 표시할 내용\r\n          });\r\n\r\n          // 마커에 mouseover 이벤트와 mouseout 이벤트를 등록합니다\r\n          // 이벤트 리스너로는 클로저를 만들어 등록합니다\r\n          // for문에서 클로저를 만들어 주지 않으면 마지막 마커에만 이벤트가 등록됩니다\r\n          kakao.maps.event.addListener(\r\n            marker,\r\n            \"mouseover\",\r\n            this.makeOverListener(this.map, marker, infowindow),\r\n          );\r\n          kakao.maps.event.addListener(\r\n            marker,\r\n            \"mouseout\",\r\n            this.makeOutListener(infowindow),\r\n          );\r\n          kakao.maps.event.addListener(\r\n            marker,\r\n            \"click\",\r\n            this.moveToDetail(informations[i].store),\r\n          );\r\n          this.markers.push(marker);\r\n        }\r\n        // console.log(this.markers);\r\n        if (positions.length > 0) {\r\n          const bounds = positions.reduce(\r\n            (bounds, latlng) => bounds.extend(latlng),\r\n            new kakao.maps.LatLngBounds(),\r\n          );\r\n\r\n          this.map.setBounds(bounds);\r\n        }\r\n        this.setCoffeeMarkers(null);\r\n        this.setStoreMarkers(null);\r\n        this.setCarparkMarkers(null);\r\n        this.setResMarkers(null);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#map {\r\n  width: 1000px;\r\n  height: 800px;\r\n}\r\n#btnRoadView {\r\n  position: absolute;\r\n  top: 5px;\r\n  left: 5px;\r\n  padding: 7px 12px;\r\n  font-size: 14px;\r\n  border: 1px solid #dbdbdb;\r\n  background-color: #fff;\r\n  border-radius: 2px;\r\n  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.04);\r\n  z-index: 3;\r\n  cursor: pointer;\r\n}\r\n#roadView {\r\n  position: absolute;\r\n  width: 50%;\r\n  right: 0;\r\n  top: 0;\r\n  z-index: 2;\r\n}\r\n#mapwrap {\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n.category,\r\n.category * {\r\n  margin: 0;\r\n  padding: 0;\r\n  color: #000;\r\n}\r\n.category {\r\n  position: absolute;\r\n  overflow: hidden;\r\n  bottom: 10px;\r\n  right: 10px;\r\n  width: 250px;\r\n  height: 50px;\r\n  z-index: 10;\r\n  border: 1px solid black;\r\n  font-family: \"Malgun Gothic\", \"맑은 고딕\", sans-serif;\r\n  font-size: 12px;\r\n  text-align: center;\r\n  background-color: #fff;\r\n}\r\n.category .menu_selected {\r\n  background: #ff5f4a;\r\n  color: #fff;\r\n  border-left: 1px solid #915b2f;\r\n  border-right: 1px solid #915b2f;\r\n  margin: 0 -1px;\r\n}\r\n.category li {\r\n  list-style: none;\r\n  float: left;\r\n  width: 50px;\r\n  height: 45px;\r\n  padding-top: 5px;\r\n  cursor: pointer;\r\n}\r\n.category .ico_comm {\r\n  display: block;\r\n  margin: 0 auto 2px;\r\n  width: 22px;\r\n  height: 26px;\r\n  background: url(\"https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/category.png\")\r\n    no-repeat;\r\n}\r\n.category .ico_comm2 {\r\n  display: block;\r\n  margin: 0 auto 2px;\r\n  width: 22px;\r\n  height: 26px;\r\n  background: url(\"../../assets/restaurant.png\") no-repeat;\r\n}\r\n.category .ico_coffee {\r\n  background-position: -10px 0;\r\n}\r\n.category .ico_store {\r\n  background-position: -10px -36px;\r\n}\r\n.category .ico_carpark {\r\n  background-position: -10px -72px;\r\n}\r\n.category .ico_restaurant {\r\n  background-position: -10px -72px;\r\n}\r\n</style>\r\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./SmapList.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./SmapList.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./SmapList.vue?vue&type=template&id=38de9542&scoped=true&\"\nimport script from \"./SmapList.vue?vue&type=script&lang=js&\"\nexport * from \"./SmapList.vue?vue&type=script&lang=js&\"\nimport style0 from \"./SmapList.vue?vue&type=style&index=0&id=38de9542&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"38de9542\",\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VBtn } from 'vuetify/lib/components/VBtn';\nimport { VCheckbox } from 'vuetify/lib/components/VCheckbox';\nimport { VRow } from 'vuetify/lib/components/VGrid';\ninstallComponents(component, {VBtn,VCheckbox,VRow})\n"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","on","showRoadView","_v","staticClass","$event","changeMarker","setOverlayMapTypeId","model","value","callback","$$v","chkTraffic","expression","chkBicycle","chkTerrain","staticRenderFns","name","data","markers","infowindow","marker","curlat","curlng","roadView","rvContainer","rv","rvClient","rvMarker","map","terrain","traffic","bicycle","markerImageSrc","coffeeMarkers","storeMarkers","carparkMarkers","coffeePositions","storePositions","carparkPositions","resMarkers","resPositions","props","house","created","navigator","computed","mapState","watch","stores","mounted","script","document","setTimeout","methods","mapActions","initMap","center","level","changeSize","wid","hei","container","displayMarker","locPosition","position","image","content","displayMarkers","markerPositions","store","kakao","makeOverListener","makeOutListener","moveToDetail","self","displayInfoWindow","iwPosition","iwRemoveable","removable","spriteSize","spriteOrigin","offset","draggable","toggleRoadview","createMarkerImage","src","size","options","createMarker","createCoffeeMarkers","imageOptions","imageSize","setCoffeeMarkers","createStoreMarkers","setStoreMarkers","createCarparkMarkers","setCarparkMarkers","createResMarkers","require","setResMarkers","type","allMenu","coffeeMenu","storeMenu","carparkMenu","resMenu","component","VBtn"],"sourceRoot":""}